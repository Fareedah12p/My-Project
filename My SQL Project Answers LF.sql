-- Createing Database
Create database Project;

-- Using existing database.
use Project;

-- Creating Product_Table.
CREATE TABLE IF NOT EXISTS myclass.`Product_Table` (
  `Product_Id` INT NOT NULL,
  `Product_Name` VARCHAR(45) NOT NULL,
  `Category` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Product_Id`))
ENGINE = InnoDB;

-- Viewing Product_Table.
select * 
from Product_Table;

-- Creating Store_Table.
CREATE TABLE IF NOT EXISTS `Store_Table` (
  `Store_Id` INT NOT NULL,
  `Store_Name` VARCHAR(45) NOT NULL,
  `State_Code` VARCHAR(45) NOT NULL,
  `State` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Store_Id`))
ENGINE = InnoDB;

-- Viewing Store_Table.
select * 
from Store_Table;

-- Creating Sales_Team_table.
CREATE TABLE IF NOT EXISTS `Sales_Team_Table` (
  `Sales_Team_Id` INT NOT NULL,
  `Sales_Team` VARCHAR(45) NOT NULL,
  `Region` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Sales_Team_Id`))
ENGINE = InnoDB;

-- Viewing Sales_Team_Table.
select * 
from Sales_Team_Table;

-- Creating Order_Table.
CREATE TABLE IF NOT EXISTS `Order_Table` (
  `Order_Number` VARCHAR(45) NOT NULL,
  `Sales_Date` VARCHAR(45) NOT NULL,
  `Sales_Channel` VARCHAR(45) NOT NULL,
  `Currency` VARCHAR(45) NOT NULL,
  `Sales_Team_Id` INT NOT NULL,
  `Store_Id` INT NOT NULL,
  `Product_Id` INT NOT NULL,
  `Order_qty` INT NULL,
  `Unit_Price` DECIMAL(5, 2) NOT NULL,
  `Unit_Cost` DECIMAL(5, 2) NOT NULL,
  PRIMARY KEY (`Order_Number`),
  CONSTRAINT `Product_Id`
    FOREIGN KEY (Product_Id)
    REFERENCES `Product_Table` (Product_Id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Sales_Team_Id`
    FOREIGN KEY (Sales_Team_Id)
    REFERENCES `Sales_Team_Table` (Sales_Team_Id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Store_Id`
    FOREIGN KEY (Store_Id)
    REFERENCES `Store_Table` (Store_Id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- Viewing Order_Table.
select * 
from Order_Table;

-- Denormalizing Table.
create table Sales_Table as
select Order_Number, Sales_Date, Sales_Channel, Currency, Order_qty, Unit_Price, Unit_Cost, Store_Name, State_Code, State, Product_Name, Category, Sales_Team, Region
from Order_Table left join Sales_Team_Table
on Order_Table.Sales_Team_Id = Sales_Team_Table.Sales_Team_Id
left join Product_Table
on Order_Table.Product_Id = Product_Table.Product_Id
left join Store_Table
on Order_Table.Store_Id = Store_Table.Store_Id;

-- Viewing Sales_Table
select *
from Sales_Table;

-- Add Calculated column
Alter table Sales_Table
add column Sales_Price decimal(8, 2) as (Unit_Price*Order_qty),
add column Cost_Price decimal(8, 2) as (Unit_Cost*Order_qty),
add column Profit decimal(8, 2) as (Sales_Price-Cost_Price);

-- What is the total sales revenue generated by the company.
select sum(Sales_Price) as Total_Sales_Revenue
from Sales_Table;

-- Extracting the product, order quantities and order number for product sold through the distributor and in-store only.
select Order_Number, Order_qty, Product_Name   
from Sales_Table
where Sales_Channel in ('Distributor', 'In-Store');

-- Extracting all the sales through Nicholas Cunningham.
select * 
from Sales_Table
where Sales_Team = 'Nicholas Cunningham';

-- Extract all orders where order quantity is greater than average.
select *
from Sales_Table
having Order_qty > (select AVG(Order_qty) from Sales_Table);

-- What are the top 10 products based on order quantity people order from the company.
select Product_Name, sum(Order_qty) as Order_qtys 
from Sales_Table
group by Product_Name
ORDER BY Order_qtys desc
limit 10;

-- How many orders are sold from stores located in Alabama.
select count(*) as "Numbers of orders from stores located in Alabama"
from Sales_Table
where State = 'Alabama';

-- Obtain all the information for order with order number “SO471”.
select * 
from Sales_Table 
where Order_Number = 'SO471';

-- What is the average profit generated from each sales region? Sort the region in descending order of average profit generated.
select avg(Profit) as Average_Profit
from Order_Table left join Sales_Team_Table
on Order_Table.Sales_Team_Id = Sales_Team_Table.Sales_Team_Id;

select Region, round(avg(Profit), 2) as Average_Profit
from Sales_Table
where (select avg(Profit) as Average_Profit)
group by Region
order by (select avg(Profit) as Average_Profit) desc;

-- Using subquery, extracting all data where sales price is greater than average sales price.
select avg (Sales_Price) as Average_Sales_Price
from Order_Table;

select *
from Sales_Table 
where Sales_Price > (
select avg(Sales_Price)
from Sales_Table);

-- Extracting the count of orders (not order quantities) for each product category for only product category with the number of orders greater than or equals to 2000.
select Category,count(Order_Number) as "No of Orders"
from Sales_Table
group by Category
Having "No of Orders" >= '2000'
order by "No of Orders" desc;

-- What are the company top five most expensive products and the total number of order quantities for each product? Do the same for top 5 cheapest products and the order quantities for each. Your manager would like to make use of this analysis to determine if the price of a product affects the number of quantities customer orders.
-- Extracting company top five most expensive products and the total number of order quantities for each product.
select Product_Name, round(Avg(Unit_Price), 2) as Avg_Price, sum(Order_qty) as Total_qty_ordered
from Sales_Table
group by Product_Name
order by Avg_Price desc
limit 5; 

-- Extracting company top five cheapst products and the total number of order quantities for each product.
select Product_Name, round(Avg(Unit_Price), 2) as Avg_Price, sum(Order_qty) as Total_qty_ordered
from Sales_Table
group by Product_Name
order by Avg_Price
limit 5; 